@page "/inv-stock-sales-upload"

@using BulkUpload.DataModel.Authentication
@using BulkUpload.DataModel.Inventory
@using BulkUpload.Repository.Interface
@using BulkUpload.Repository.UserHelper
@using OfficeOpenXml

@inject IJSRuntime JS
@inject IStockSalesTempService StockSalesTempService
@inject ICustomer _customerService
@inject IStore StoreServices
@inject IStockVATSalesNature _salesNatureService
@inject IDeliveryPoint _deliveryPointService
@inject IVehicleType _vehicleTypeService
@inject IProduct _productService
@inject ITransactionID TransactionIDService
@inject UserSession userSession

<PageTitle>Read and Send Sales Data to Database</PageTitle>

<h3>Upload Sales Data</h3>



<InputFile OnChange="ReadExcelFile" accept=".xlsx" />

@if (excelData != null)
{
    <button class="btn btn-success mt-3" @onclick="SaveFileAndData">Save Data to Database</button>
    <br />
    <br />

    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                @foreach (var header in excelData[0])
                {
                    <th>@header</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var row in excelData.Skip(1))
            {
                <tr>
                    @foreach (var cell in row)
                    {
                        <td>@cell</td>
                    }
                </tr>
            }
        </tbody>
    </table>

}

@code {
    private IBrowserFile? file;
    private List<List<string>>? excelData;

    private async Task ReadExcelFile(InputFileChangeEventArgs e)
    {
        try
        {
            file = e.File;
            if (file != null)
            {
                using var memoryStream = new MemoryStream();
                await file.OpenReadStream().CopyToAsync(memoryStream);
                memoryStream.Position = 0;

                ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
                using var package = new ExcelPackage(memoryStream);

                var worksheet = package.Workbook.Worksheets[0];
                var rowCount = worksheet.Dimension.Rows;
                var colCount = worksheet.Dimension.Columns;

                excelData = new List<List<string>>();
                for (int row = 1; row <= rowCount; row++)
                {
                    var rowData = new List<string>();
                    for (int col = 1; col <= colCount; col++)
                    {
                        rowData.Add(worksheet.Cells[row, col].Text);
                    }
                    excelData.Add(rowData);
                }
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error reading file: {ex.Message}");
        }
    }



    private async Task SaveFileAndData()
    {
        try
        {
            #region Save File

            if (file == null || excelData == null || excelData.Count < 2)
            {
                await JS.InvokeVoidAsync("alert", "Please upload a valid Excel file with data.");
                return;
            }

            // 1. Save the file to the project folder
            var currentDate = DateTime.Now.ToString("yyyyMMdd");
            var uniqueFileName = $"{currentDate}_{Guid.NewGuid()}_{file.Name}";
            var uploadsFolder = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "StockSalesFiles");

            if (!Directory.Exists(uploadsFolder))
            {
                Directory.CreateDirectory(uploadsFolder);
            }

            var filePath = Path.Combine(uploadsFolder, uniqueFileName);

            using var stream = new FileStream(filePath, FileMode.Create);
            await file.OpenReadStream().CopyToAsync(stream);

            Console.WriteLine($"File saved successfully at: {filePath}");

            #endregion

            // 2. Save the data to the database
            #region Save Data
            List<InvStockSalesTemp> stockSalesTemps = new();
            Dictionary<(long customerID, string invRef), string> challanMap = new();

            for (int i = 1; i < excelData.Count; i++)
            {
                var row = excelData[i];

                string OCode = userSession.OCode;
                if (string.IsNullOrEmpty(OCode))
                {
                    await JS.InvokeVoidAsync("alert", "OCode not found");
                    return;
                }

                Guid? create_User = userSession.UserId;
                if (create_User == null)
                {
                    await JS.InvokeVoidAsync("alert", "User ID not found");
                    return;
                }

                //DateTime Validation
                #region //DateTime Validation
                DateTime dateTime; 

                if (row[0] == null)
                {
                    await JS.InvokeVoidAsync("alert", $" Date Time not found");
                    return;
                }
                else
                {
                    dateTime = DateTime.TryParse(row[0], out var date) ? date : DateTime.Now;
                }

                #endregion

                //coustomer Validation
                #region //Customer Validation
                long? customer = null;
                string? salesType = "";
                string? customerBINNo = "";

                if (row[1] == null)
                {
                    await JS.InvokeVoidAsync("alert", $" Customer not found");
                    return;
                }
                else
                {
                    if (!string.IsNullOrEmpty(row[1]))
                    {
                        var customerName = await _customerService.GetByCustomerCodeAsync(row[1]);
                        if (customerName != null)
                        {
                            customer = customerName.Customer_Id;
                            salesType = customerName.CustomerType;
                            customerBINNo = customerName.CustomerBINNumber;
                            if (customerBINNo == null)
                            {
                                customerBINNo = "";
                            }
                        }
                        else
                        {
                            await JS.InvokeVoidAsync("alert", $" Invalid Customer Name: {row[1]}");
                            return;
                        }
                    }
                }



                #endregion

                //warehouse Validation
                #region //Warehouse Validation
                int? warehouse = null;
                if (row[2] == null)
                {
                    await JS.InvokeVoidAsync("alert", $" Warehouse not found");
                    return;
                }
                else
                {
                    if (!string.IsNullOrEmpty(row[2]))
                    {
                        var warehouseName = await StoreServices.GetByStoreCode(row[2]);
                        if (warehouseName != null)
                        {
                            warehouse = warehouseName.Store_Id;
                        }
                        else
                        {
                            await JS.InvokeVoidAsync("alert", $"Invalid Warehouse: {row[2]}");
                            return;
                        }
                    }
                    else
                    {
                        await JS.InvokeVoidAsync("alert", $"Invalid Warehouse: {row[2]}");
                        return;
                    }
                }

                #endregion


                //SalesNature Validation
                #region //SalesNature Validation
                string? salesNature = null;
                if (row[3] == null)
                {
                    await JS.InvokeVoidAsync("alert", $" SalesNature not found");
                    return;
                }
                else
                {
                    if (!string.IsNullOrEmpty(row[3]))
                    {
                        var salesNatureName = await _salesNatureService.GetByNameAsync(row[3]);
                        if (salesNatureName != null)
                        {
                            salesNature = salesNatureName.VatNature;
                        }
                        else
                        {
                            await JS.InvokeVoidAsync("alert", $"Invalid Sales Nature: {row[3]}");
                            return;
                        }
                    }
                }

                #endregion


                //DeliveryPoint Validation
                #region //DeliveryPoint Validation
                long? deliveryPoint = null;
                if (row[4] == null)
                {
                    deliveryPoint = null;
                }
                else
                {
                    if (!string.IsNullOrEmpty(row[4]))
                    {
                        var deliveryPointName = await _deliveryPointService.GetByNameAsync(row[4]);
                        if (deliveryPointName != null)
                        {
                            deliveryPoint = deliveryPointName.DeliveryPoint_Id;
                        }
                        else
                        {
                            await JS.InvokeVoidAsync("alert", $"Invalid Delivery Point: {row[4]}");
                            return;
                        }
                    }
                }

                #endregion
                // VehicleType Validation
                #region //VehicleType Validation
                int? vehicleType = null;
                if (row[5] == null)
                {
                    vehicleType = null;
                }
                else
                {
                    if (!string.IsNullOrEmpty(row[5]))
                    {
                        var vehicleTypeName = await _vehicleTypeService.GetByNameAsync(row[5]);
                        if (vehicleTypeName != null)
                        {
                            vehicleType = vehicleTypeName.ID;
                        }
                        else
                        {
                            await JS.InvokeVoidAsync("alert", $"Invalid Vehicle Type: {row[5]}");
                            return;
                        }
                    }
                }

                #endregion

                //Product Item Validation
                #region //Product Item Validation
                long ProductItem;
                if (!string.IsNullOrEmpty(row[7]))
                {
                    var ProductItemName = await _productService.GetByNameAsync(row[7]);
                    if (ProductItemName != null)
                    {
                        ProductItem = ProductItemName.ProductId;

                    }
                    else
                    {
                        await JS.InvokeVoidAsync("alert", $"Invalid Product Item: {row[7]}");
                        return;
                    }
                }
                else
                {
                    await JS.InvokeVoidAsync("alert", $"Product Item not found: {row[7]}");
                    return;
                }

                #endregion

                #region // Item Rate Validation


                double quantity = double.TryParse(row[8], out var qty) ? qty : 0;

                decimal rate = decimal.TryParse(row[9], out var rateValue) ? rateValue : 0;

                // Total Amount
                decimal total = (decimal)quantity * rate;
                //double Totalvalue = double.TryParse(row[13], out var totalAmountValue1) ? totalAmountValue1 : 0;
                if (row[10] != null)
                {
                    decimal value = decimal.TryParse(row[10], out var totalAmountValue1) ? totalAmountValue1 : 0;

                    if (total == value)
                    {
                        total = value;
                    }
                    else
                    {
                        await JS.InvokeVoidAsync("alert", $"you calculate Invalid total amount {row[10]}. Please check provided value.");
                        return;
                    }

                }



                #endregion

                #region // VAT Validation

                decimal sd = decimal.TryParse(row[11], out var sdValue) ? sdValue : 0;

                decimal sdAmount = 0;                

                if (row[12] != null)
                {
                    decimal value = decimal.TryParse(row[12], out var sdAmountValue) ? sdAmountValue : 0;
                    sdAmount = (total * sd) / 100;
                    if (sdAmount == value)
                    {
                        sdAmount = value;
                    }
                    else
                    {
                        await JS.InvokeVoidAsync("alert", $"you calculate Invalid SD amount {row[12]}.");
                        return;
                    }
                }

                total += sdAmount;

                decimal vatRate = decimal.TryParse(row[13], out var vatRateValue) ? vatRateValue : 0;

                decimal itemVat = 0;
                         
                if (row[14] != null)
                {
                    decimal value = decimal.TryParse(row[14], out var vatValue) ? vatValue : 0;
                    itemVat = (total * vatRate) / 100;
                    if (itemVat == value)
                    {
                        itemVat = value;
                    }
                    else
                    {
                        await JS.InvokeVoidAsync("alert", $"you calculate Invalid Item VAT amount {row[14]}. Please check provided value.");
                        return;
                    }
                }
                else
                {
                    await JS.InvokeVoidAsync("alert", $"Item VAT amount not found {row[14]}.");
                    return;
                }

                

                decimal netPriceIncVAT = 0;
                if (row[15] != null)
                {
                    decimal value = decimal.TryParse(row[15], out var totalPriceIncVATValue) ? totalPriceIncVATValue : 0;
                    netPriceIncVAT = total + itemVat;
                    if (netPriceIncVAT == value)
                    {
                        netPriceIncVAT = value;
                    }
                    else
                    {
                        await JS.InvokeVoidAsync("alert", $"you calculate Invalid Net Price Inc VAT amount {row[15]}.");
                        return;
                    }
                }
                else
                {
                    await JS.InvokeVoidAsync("alert", $"Net Price not found {row[15]}.");
                    return;
                }

                #endregion




                #region // InvoiceNo validation

                // (create ChallanNo defend on Customer ID & invRef.
                // If Customer ID & invRef same insert same challanNo for every row. if not create new challanNo)


                string invRef = row[16];
                var key = (customer.Value, invRef);

                if (!challanMap.TryGetValue(key, out var refNo))
                {
                    refNo = TransactionIDService.GetNewSalesTempChallanNo(OCode);
                    challanMap[key] = refNo;
                }

                #endregion

                var stockSales = new InvStockSalesTemp
                    {
                        Invoice = refNo,

                        Date = dateTime, // row 0

                        BINNo = customerBINNo,

                        CustomerID = customer, // row 1                      

                        //LadgerCode = "",

                        StoreId = warehouse, // row 2
                        
                        NatureOfSupply = salesNature, // row 3 

                        DeliveryPoint_Id = deliveryPoint, // row 4
                        
                        VehicleType_Id = vehicleType, // row 5
                        
                        VehicleNo = row[6], // row 6
                        
                        ItemId = ProductItem, // row 7

                        Qty = quantity, // row 8

                        Price = rate, // row 9

                        Total = total, // row 10

                        SDPercentage = sd, // row 11

                        SDAmount = sdAmount, // row 12

                        ItemVatPer = vatRate, // row 13

                        ItemVat = itemVat, // row 14
                        
                        NetTotal = netPriceIncVAT, // row 15
                        
                        Remarks = row[16], // row 16

                        ItemDiscountAmt = 0,

                        FixedVATRate = 0,

                        InvoiceAmount = 0,

                        SalesType = "Local",

                        OCODE = OCode,

                        Create_User = create_User,
                        Create_Date = DateTime.Now,
                        //Edit_User = Guid.TryParse(row[25], out var editUser) ? editUser : (Guid?)null,
                        //Edit_Date = DateTime.TryParse(row[26], out var editDate) ? editDate : (DateTime?)null,

                        
                        //DiscountPercent = double.TryParse(row[29], out var discountPercent) ? discountPercent : 0,
                        //ItemRateDiscPercent = double.TryParse(row[30], out var itemRateDiscPercent) ? itemRateDiscPercent : 0,
                        //PO_RefNo = row[31]
                    };

                // Add the data to the database using the service.
                //await StockSalesTempService.AddAsync(stockSales);
                stockSalesTemps.Add(stockSales);
            }

            await StockSalesTempService.AddRangeAsync(stockSalesTemps);
             

            await JS.InvokeVoidAsync("alert", "File and data saved successfully.");

            // Reset
            file = null;
            excelData = null;

            #endregion
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error saving data: {ex.Message}");
        }
    }




}